// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/samthehai/ml-backend-test-samthehai/internal/entity"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockMovieRepository) FindByID(ctx context.Context, movieID uint64) (*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, movieID)
	ret0, _ := ret[0].(*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMovieRepositoryMockRecorder) FindByID(ctx, movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMovieRepository)(nil).FindByID), ctx, movieID)
}

// FindByKeyword mocks base method.
func (m *MockMovieRepository) FindByKeyword(ctx context.Context, keyword string) ([]*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKeyword", ctx, keyword)
	ret0, _ := ret[0].([]*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKeyword indicates an expected call of FindByKeyword.
func (mr *MockMovieRepositoryMockRecorder) FindByKeyword(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKeyword", reflect.TypeOf((*MockMovieRepository)(nil).FindByKeyword), ctx, keyword)
}

// FindPopularMovies mocks base method.
func (m *MockMovieRepository) FindPopularMovies(ctx context.Context, limit uint) ([]*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPopularMovies", ctx, limit)
	ret0, _ := ret[0].([]*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPopularMovies indicates an expected call of FindPopularMovies.
func (mr *MockMovieRepositoryMockRecorder) FindPopularMovies(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPopularMovies", reflect.TypeOf((*MockMovieRepository)(nil).FindPopularMovies), ctx, limit)
}
